<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Q Solve - Homework Helper</title>
<style>
:root {
  --primary-color: #4f46e5;
  --bg-color: #f9fafb;
  --text-color: #111827;
  --card-bg: #ffffff;
}
body {
  font-family: Arial, sans-serif;
  margin: 0; padding: 0;
  background: var(--bg-color);
  color: var(--text-color);
  transition: background 0.3s, color 0.3s;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  flex-direction: column;
}
.container {
  max-width: 900px;
  width: 100%;
  padding: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
}
h1 { text-align: center; margin-bottom: 20px; }
.card {
  background: var(--card-bg);
  border-radius: 12px;
  padding: 20px;
  margin: 15px 0;
  box-shadow: 0 4px 8px rgba(0,0,0,0.08);
  width: 100%;
  max-width: 700px;
  opacity: 0;
  transform: translateY(20px);
  animation: fadeInUp 0.6s forwards;
}
.card h2 { margin-top: 0; text-align: center; }
input, textarea, button, select {
  padding: 10px; margin: 8px 0;
  border: 1px solid #ccc; border-radius: 6px;
  width: 100%;
  max-width: 500px;
}
button {
  background: var(--primary-color);
  color: #fff; border: none; cursor: pointer;
  transition: 0.2s;
}
button:hover { opacity: 0.9; }
.dark-mode { --bg-color: #1f2937; --text-color: #f9fafb; --card-bg: #374151; }
textarea { resize: vertical; min-height: 60px; }
.history-item { padding: 8px; border-bottom: 1px solid #e5e7eb; text-align: left; opacity:0; transform:translateY(10px); animation: fadeInUp 0.5s forwards;}
.history-item:last-child { border-bottom: none; }
.message { color: #ef4444; font-weight: bold; margin-top: 10px; text-align:center; }
@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}
/* Dark mode toggle aligned right */
.settings-row {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 8px;
  font-weight: bold;
}
/* History buttons aligned center */
.history-buttons {
  display: flex;
  gap: 10px;
  justify-content: center;
  margin-top: 10px;
}
</style>
</head>
<body>
<div class="container">

  <!-- About / Welcome Page -->
  <div id="aboutPage" class="card">
    <h1>üìò Q Solve - Homework Helper</h1>
    <p>Q Solve helps you finish homework by giving <b>step-by-step solutions</b> for any question. 
    You can <b>type</b> your question or <b>upload a photo</b> of your homework, and Q Solve will explain it clearly.</p>
    <h2>Let's get started</h2>
    <input type="text" id="userName" placeholder="Enter your name">
    <select id="userGender">
      <option value="Mr.">Mr.</option>
      <option value="Ms.">Ms.</option>
    </select>
    <button onclick="startApp()">Continue</button>
  </div>

  <!-- Main App -->
  <div id="mainApp" style="display:none; flex-direction: column; align-items: center; width: 100%;">
    <h1 id="welcomeMsg"></h1>

    <!-- Settings -->
    <div class="card">
      <h2>‚öôÔ∏è Settings</h2>
      <div class="settings-row">
        <span id="darkModeLabel">Light</span>
        <input type="checkbox" id="darkModeToggle" onchange="toggleDarkMode()">
      </div>
    </div>

    <!-- Ask a Question -->
    <div class="card">
      <h2>‚úçÔ∏è Ask a Question</h2>
      <textarea id="questionInput" placeholder="Type your homework question here..."></textarea>
      <p style="text-align:center;">OR</p>
      <input type="file" id="ocrInput" accept="image/*">
      <button onclick="processOCR()">Extract from Image</button>
      <button onclick="solveQuestion()">Solve Step by Step</button>
    </div>

    <!-- Solution -->
    <div class="card">
      <h2>üìñ Solution</h2>
      <p id="solutionOutput">No solution yet.</p>
    </div>

    <!-- History -->
    <div class="card">
      <h2>üïò History</h2>
      <div id="historyList"></div>
      <p id="historyMessage" class="message"></p>
      <div class="history-buttons">
        <button onclick="exportHistory()">Export History (CSV)</button>
        <button onclick="deleteHistory()" style="background:#ef4444;">Delete History</button>
      </div>
    </div>
  </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/tesseract.js@2/dist/tesseract.min.js"></script>
<script>
const API_KEY = "AIzaSyDVEsRPNyVY9zMzLNZ6QdZ2JK28N-66610"; 
let history = JSON.parse(localStorage.getItem("qsolveHistory")) || [];

function startApp(){
  const name = document.getElementById("userName").value.trim();
  const gender = document.getElementById("userGender").value;
  if(!name){
    document.getElementById("solutionOutput").innerText = "‚ùå Please enter your name first!";
    return;
  }
  localStorage.setItem("userName", name);
  localStorage.setItem("userGender", gender);
  document.getElementById("aboutPage").style.display="none";
  document.getElementById("mainApp").style.display="flex";
  document.getElementById("welcomeMsg").innerText=`Welcome ${gender} ${name} üëã`;
  renderHistory();
}

// OCR
function processOCR(){
  const file = document.getElementById("ocrInput").files[0];
  if(!file){
    document.getElementById("solutionOutput").innerText = "‚ùå Please upload an image first.";
    return;
  }
  document.getElementById("solutionOutput").innerText="‚è≥ Extracting text from image...";
  Tesseract.recognize(file,'eng').then(({ data: { text } })=>{
    document.getElementById("questionInput").value = text.trim();
    document.getElementById("solutionOutput").innerText="‚úÖ Text extracted. Now click 'Solve Step by Step'.";
  }).catch(err=>{
    document.getElementById("solutionOutput").innerText="‚ùå OCR failed.";
    console.error(err);
  });
}

// Solve with Gemini
async function solveQuestion(){
  const q = document.getElementById("questionInput").value.trim();
  if(!q){
    document.getElementById("solutionOutput").innerText = "‚ùå Please type or upload a question first.";
    return;
  }
  document.getElementById("solutionOutput").innerText="‚è≥ Thinking...";
  try{
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${API_KEY}`,
      {
        method:"POST",
        headers:{ "Content-Type":"application/json" },
        body: JSON.stringify({
          contents:[{
            parts:[{
              text:`You are a homework tutor. Solve this question step by step, explaining clearly like a teacher would: ${q}`
            }]
          }]
        })
      }
    );
    const data = await response.json();
    const solution = data.candidates?.[0]?.content?.parts?.[0]?.text || "‚ö†Ô∏è No solution returned.";
    document.getElementById("solutionOutput").innerText = solution;

    const entry = { question:q, solution, date:new Date().toLocaleString() };
    history.push(entry);
    localStorage.setItem("qsolveHistory", JSON.stringify(history));
    renderHistory();

  }catch(err){
    document.getElementById("solutionOutput").innerText="‚ùå Error getting solution.";
    console.error(err);
  }
}

// History
function renderHistory(){
  const list=document.getElementById("historyList");
  const msg=document.getElementById("historyMessage");
  list.innerHTML="";
  if(history.length===0){
    msg.innerText="No questions solved yet.";
  } else {
    msg.innerText="";
    history.forEach(item=>{
      const div=document.createElement("div");
      div.className="history-item";
      div.innerHTML=`<b>Q:</b> ${item.question}<br><b>A:</b> ${item.solution}<br><i>${item.date}</i>`;
      list.appendChild(div);
    });
  }
}

function exportHistory(){
  if(history.length===0){
    document.getElementById("historyMessage").innerText="‚ùå No history to export.";
    return;
  }
  let csv="Question,Answer,Date\n"+history.map(h=>`"${h.question.replace(/"/g,'""')}","${h.solution.replace(/"/g,'""')}","${h.date}"`).join("\n");
  const blob=new Blob([csv],{type:'text/csv'});
  const url=URL.createObjectURL(blob);
  const a=document.createElement("a");
  a.href=url; a.download="qsolve_history.csv"; a.click();
}

function deleteHistory(){
  if(confirm("Are you sure you want to delete all history?")){
    history = [];
    localStorage.removeItem("qsolveHistory");
    renderHistory();
  }
}

// Dark Mode
function toggleDarkMode(){
  const checked=document.getElementById("darkModeToggle").checked;
  const label=document.getElementById("darkModeLabel");
  if(checked){ 
    document.body.classList.add("dark-mode"); 
    localStorage.setItem("darkMode","true"); 
    label.innerText = "Dark";
  }
  else{ 
    document.body.classList.remove("dark-mode"); 
    localStorage.setItem("darkMode","false"); 
    label.innerText = "Light";
  }
}

// Auto load
window.onload=()=>{
  const name=localStorage.getItem("userName");
  const gender=localStorage.getItem("userGender");
  const dark=localStorage.getItem("darkMode")==="true";
  const darkToggle=document.getElementById("darkModeToggle");
  const darkLabel=document.getElementById("darkModeLabel");

  if(name){
    document.getElementById("aboutPage").style.display="none";
    document.getElementById("mainApp").style.display="flex";
    document.getElementById("welcomeMsg").innerText=`Welcome ${gender} ${name} üëã`;
    renderHistory();
  }

  if(dark){
    document.body.classList.add("dark-mode");
    darkToggle.checked=true;
    darkLabel.innerText = "Dark";
  } else {
    darkLabel.innerText = "Light";
  }
};
</script>
</body>
</html>
